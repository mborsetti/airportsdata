# Project metadata, including build by setuptools
# See https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html

# TOML syntax at https://toml.io/en/


[build-system]
# Minimum requirements for the build system to execute.
requires = ['setuptools']  # PEP 508 specifications.
# Setuptools specification
build-backend = "setuptools.build_meta"


[project]
# See https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
dynamic = ['version', 'dependencies']
name = 'airportsdata'
description = """\
    Extensive database of location and timezone data for nearly every airport and landing strip in the world.\
    """
readme = { file = 'README.rst', content-type = 'text/x-rst' }
requires-python = '>=3.9'
license = {file = 'LICENSE'}
authors = [
    {name = 'Mike Borsetti', email = 'mike+airportsdata@borsetti.com'},
]
maintainers = [
    {name = 'Mike Borsetti', email = 'mike+airportsdata@borsetti.com'},
]
keywords = ['airports', 'aerodromes', 'ICAO', 'IATA']
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'License :: OSI Approved :: MIT License',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Operating System :: OS Independent',
    'Topic :: Database',
    'Intended Audience :: Developers',
    'Typing :: Typed',
]

[project.urls]
Documentation = 'https://github.com/mborsetti/airportsdata/blob/main/README.rst'
Repository = 'https://github.com/mborsetti/airportsdata/'
'Database (csv)' = 'https://github.com/mborsetti/airportsdata/blob/main/airportsdata/airports.csv'
Changelog = 'https://github.com/mborsetti/airportsdata/blob/main/CHANGELOG.rst'
Issues = 'https://github.com/mborsetti/airportsdata/issues'
CI = 'https://github.com/mborsetti/airportsdata/actions'


# -------------------------- setuptools --------------------------
# Called by build
# See https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
[tool.setuptools]
packages = ['airportsdata']

[tool.setuptools.dynamic]
version = {attr = 'airportsdata.__version__'}
dependencies = {file = 'requirements.txt'}

[tool.setuptools.package-data]
'airportsdata' = ['py.typed']

# -------------------------- black --------------------------
# Uncompromising code formatting
# Runs as part of pre-commit
# Config file documentation
# https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
[tool.black]
# What's in here overrides the command-line options shown by running $ black --help.
line_length = 120
target_version = ['py39']
skip_string_normalization = true
extend_exclude = '/(\.idea|\.pytest_cache|\__pycache__|\venv.*|\webchanges.egg-info)/'
color = true


# -------------------------- coverage --------------------------
# Runs in Github Actions (see .github/workflows/ci-cd.yaml) and in tox (see tox.ini).
# Config file documentation at https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
branch = true
source = ['.']
omit = [
    '.*/*',
    'build/*',
    'dist/*',
    'docs/*',
    'htmlcov/*',
    'pip/*',
    'tests/*',
    'airportsdata.egg-info/*'
]
relative_files = true
command_line = '-m pytest -v'
parallel = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Don't complain about missing debug-only code:
    'def __repr__',
    'if self\.debug:',

    # Have to re-enable the standard pragma
    'pragma: no cover',

    # Don't complain if tests don't hit defensive assertion code:
    'raise AssertionError',
    'raise NotImplementedError',

    # Don't complain if non-runnable code isn't run:
    'if 0:',
    'if __name__ == .__main__.:',

    # Don't complain if module is not importable (handled by code):
    'except ImportError:',

    # Don't cover IDE code:
    'if TYPE_CHECKING:'
]
# ignore_errors = true


# -------------------------- pytest --------------------------
# Testing framework
# Config file documentation at https://docs.pytest.org/en/stable/reference/reference.html#ini-options-ref
[tool.pytest.ini_options]
log_auto_indent = true
# Enable log display during test run (aka "live logging" https://docs.pytest.org/en/stable/logging.html#live-logs)
log_cli = true
minversion = '8.3.3'
testpaths = ['tests']

# Adds pytest-cov functionality (see https://pytest-cov.readthedocs.io/en/latest/config.html)
# Note: --cov moved to .github/workflows/ci-cd.yaml and tox.ini due to interference with PyCharm breakpoints (see
# https://github.com/pytest-dev/pytest-cov/issues/131) and to enable running tox --parallel
# Instead of below, now runs with $ coverage run --parallel-mode
# addopts = --cov=./ --cov-report=term --cov-report=html
