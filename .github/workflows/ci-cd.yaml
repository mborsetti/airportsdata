# GitHub Actions docs: https://docs.github.com/en/actions/learn-github-actions
# Reference syntax: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
# Env. variables: https://docs.github.com/en/actions/reference/environment-variables#default-environment-variables
# Add'l variables: https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions

# Requires encrypted secret (see https://docs.github.com/en/actions/reference/encrypted-secrets) secrets.pypi_password

# This file is automatically "updated" with PRs by the "pre-commit ci" app in GitHub https://pre-commit.ci; it is
# currently scheduled weekly at approximately 16:00 UTC Monday.


name: Test and deploy release
on: [push, pull_request, workflow_dispatch]

env:
  FORCE_COLOR: 1
  PYTHONUNBUFFERED: 1
  PYTHONUTF8: 1

jobs:
  # Set the job key. The key is displayed as the job name when a job name is not provided.
  test:
    name: "Test (${{ matrix.python-version }}, ${{ matrix.os }})"
    # matrix.os is defined in strategy.
    runs-on: ${{ matrix.os }}
    # Identifies any jobs that must complete successfully before this job will run.
    # needs: [pre-commit]
    # A strategy creates a build matrix for your jobs. You can define different variations to run each job in.
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        # Python versions at https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json
        # RCs need to be specified fully, e.g. '3.13.0-rc.3'
        python-version: ['3.13', '3.12', '3.11', '3.10']

    env:
      commitmsg: ${{ github.event.head_commit.message }}  # only available at check-out; becomes env.commitmsg
      UV_SYSTEM_PYTHON: 1  # for uv, turns on --system by default
      UV_CACHE_DIR: /tmp/.uv-cache  # for uv's persistent cache

    steps:
      # Checks out a copy of the repository per https://github.com/actions/checkout
      - name: Check out repo
        uses: actions/checkout@main

      # Install uv per https://github.com/astral-sh/setup-uv
      # Docs at https://docs.astral.sh/uv/guides/integration/github
      - name: Install uv
        uses: astral-sh/setup-uv@main
        with:
          enable-cache: true

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}

      # Build Python and packages per https://github.com/actions/setup-python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@main
        with:
          python-version: ${{ matrix.python-version }}
          # cache: 'pip'

      - name: Install dependencies
        run: |
          uv pip install --upgrade .
          uv pip install --upgrade coveralls -r tests/requirements_testing.txt

      - name: Run tests (Linux/MacOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run:
          python -m pytest -v --cov=./ --cov-report=term tests/
        env:
          PYTHONUTF8: 1

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run:
          # workaround for Windows fatal exception: access violation
          python -m pytest -v --cov=./ --cov-report=term -p no:faulthandler tests/
        env:
          PYTHONUTF8: 1
          COVERALLS_FLAG_NAME: tests-${{ matrix.python-version }}-${{ matrix.os }}
          COVERALLS_PARALLEL: true

      # below may not be working as pytest-cov does not create the ./coverage/lcov.info file!
#      - name: Upload LCOV coverage data to Coveralls
#        uses: coverallsapp/github-action@main
#        with:
#          github-token: ${{ secrets.github_token }}
#          flag-name: tests-${{ matrix.python-version }}-${{ matrix.os }}
#          parallel: true
#
#      - name: Upload coverage to Coveralls (parallel)
#        run: coveralls --service=github
#        env:
#          GITHUB_TOKEN: ${{ secrets.github_token }}
#          COVERALLS_FLAG_NAME: tests-${{ matrix.python-version }}-${{ matrix.os }}
#          COVERALLS_PARALLEL: true

      - name: Minimize uv cache
        run: uv cache prune --ci

  coveralls:
    name: Indicate completion to coveralls.io
    needs: [test]
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls parallel finished
      uses: coverallsapp/github-action@main
      with:
        github-token: ${{ secrets.github_token }}
        parallel-finished: true

  deploy:
    name: Deploy release
    permissions:
      contents: write  # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    needs: [test]
    # ref https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/airportsdata>
    steps:
      - name: Check out repo
        uses: actions/checkout@main

      # Install uv per https://github.com/astral-sh/setup-uv
      # Docs at https://docs.astral.sh/uv/guides/integration/github
      - name: Install uv
        uses: astral-sh/setup-uv@main
        with:
          enable-cache: true

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}

      - name: Set up Python
        uses: actions/setup-python@main
        with:
          python-version: '3.13'
          # cache: 'pip'

      # Install pip dependencies
      - name: Install dependencies
        run: |
          uv pip install --system --upgrade build

      # build https://pypa-build.readthedocs.io/en/latest/
      - name: Build dist
        run: |
          python -m build

      # PyPI publish GitHub Action from https://github.com/pypa/gh-action-pypi-publish
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          user: __token__
#          password: ${{ secrets.pypi_password }}

      - name: Create GitHub release
        id: create_release
        uses: softprops/action-gh-release@master
        with:
          body_path: RELEASE.rst
          draft: false
          prerelease: false
          preserve_order: false
          make_latest: true

      - name: Minimize uv cache
        run: uv cache prune --ci
